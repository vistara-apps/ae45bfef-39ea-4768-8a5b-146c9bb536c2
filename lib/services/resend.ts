import { Resend } from 'resend';
import { PatrolReport } from '@/lib/types';

const resend = new Resend(process.env.RESEND_API_KEY);

export async function sendPatrolReport(
  report: PatrolReport,
  clientEmail: string,
  propertyName: string
): Promise<void> {
  try {
    const html = generateReportHTML(report, propertyName);

    await resend.emails.send({
      from: 'PatrolProof <reports@patrolproof.com>',
      to: clientEmail,
      subject: `${propertyName} Patrol Report - ${report.startTime.toLocaleDateString()}`,
      html,
      attachments: [
        {
          filename: `patrol-report-${report.patrolID}.pdf`,
          content: generatePDF(report), // This would need jsPDF implementation
        },
      ],
    });
  } catch (error) {
    console.error('Error sending patrol report:', error);
    throw new Error('Failed to send patrol report');
  }
}

function generateReportHTML(report: PatrolReport, propertyName: string): string {
  return `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="utf-8">
      <title>Patrol Report - ${propertyName}</title>
      <style>
        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }
        .container { max-width: 600px; margin: 0 auto; background: white; padding: 30px; border-radius: 8px; }
        .header { text-align: center; border-bottom: 2px solid #1a365d; padding-bottom: 20px; margin-bottom: 30px; }
        .logo { font-size: 24px; font-weight: bold; color: #1a365d; }
        .stats { display: grid; grid-template-columns: repeat(2, 1fr); gap: 20px; margin: 20px 0; }
        .stat { background: #f8fafc; padding: 15px; border-radius: 6px; text-align: center; }
        .stat-value { font-size: 24px; font-weight: bold; color: #1a365d; }
        .stat-label { color: #64748b; font-size: 14px; }
        .incidents { margin: 30px 0; }
        .incident { background: #fef2f2; border-left: 4px solid #dc2626; padding: 15px; margin: 10px 0; border-radius: 4px; }
        .footer { text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #e2e8f0; color: #64748b; }
      </style>
    </head>
    <body>
      <div class="container">
        <div class="header">
          <div class="logo">PatrolProof</div>
          <h1>${propertyName} Patrol Report</h1>
          <p>${report.startTime.toLocaleDateString()} - ${report.endTime.toLocaleDateString()}</p>
        </div>

        <div class="stats">
          <div class="stat">
            <div class="stat-value">${report.checkpointsCompleted}/${report.checkpointsRequired}</div>
            <div class="stat-label">Checkpoints Completed</div>
          </div>
          <div class="stat">
            <div class="stat-value">${report.patrolScore}/100</div>
            <div class="stat-label">Patrol Score</div>
          </div>
          <div class="stat">
            <div class="stat-value">${report.incidents.length}</div>
            <div class="stat-label">Incidents Reported</div>
          </div>
          <div class="stat">
            <div class="stat-value">+${report.totalGRT}</div>
            <div class="stat-label">GRT Earned</div>
          </div>
        </div>

        <div class="incidents">
          <h3>Incidents Reported</h3>
          ${report.incidents.length > 0
            ? report.incidents.map(incident => `
                <div class="incident">
                  <strong>${incident.severity.toUpperCase()}:</strong> ${incident.aiSummary}
                  <br><small>${incident.reportedAt.toLocaleString()}</small>
                </div>
              `).join('')
            : '<p>No incidents reported during this patrol.</p>'
          }
        </div>

        <div class="footer">
          <p>This report was generated by PatrolProof - Verifiable guard tours that build trust.</p>
          <p>Guard: ${report.guardName}</p>
        </div>
      </div>
    </body>
    </html>
  `;
}

function generatePDF(report: PatrolReport): Buffer {
  // This would use jsPDF to generate the PDF
  // For now, return empty buffer
  return Buffer.from('');
}

